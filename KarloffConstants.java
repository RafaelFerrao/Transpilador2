/* Generated By:JavaCC: Do not edit this line. KarloffConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KarloffConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAIN = 5;
  /** RegularExpression Id. */
  int VOID = 6;
  /** RegularExpression Id. */
  int NEWVAR = 7;
  /** RegularExpression Id. */
  int FLOAT = 8;
  /** RegularExpression Id. */
  int BOOLEAN = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int THEN = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int READ_INPUT = 13;
  /** RegularExpression Id. */
  int PRINT_OUTPUT = 14;
  /** RegularExpression Id. */
  int RETURN = 15;
  /** RegularExpression Id. */
  int FUN = 16;
  /** RegularExpression Id. */
  int TRUE = 17;
  /** RegularExpression Id. */
  int FALSE = 18;
  /** RegularExpression Id. */
  int ASSIGN = 19;
  /** RegularExpression Id. */
  int PLUS = 20;
  /** RegularExpression Id. */
  int MINUS = 21;
  /** RegularExpression Id. */
  int MULT = 22;
  /** RegularExpression Id. */
  int DIV = 23;
  /** RegularExpression Id. */
  int AND = 24;
  /** RegularExpression Id. */
  int OR = 25;
  /** RegularExpression Id. */
  int LTHAN = 26;
  /** RegularExpression Id. */
  int GTHAN = 27;
  /** RegularExpression Id. */
  int EQUALS = 28;
  /** RegularExpression Id. */
  int LBRACE = 29;
  /** RegularExpression Id. */
  int RBRACE = 30;
  /** RegularExpression Id. */
  int LPAR = 31;
  /** RegularExpression Id. */
  int RPAR = 32;
  /** RegularExpression Id. */
  int SEMICOLON = 33;
  /** RegularExpression Id. */
  int COMMA = 34;
  /** RegularExpression Id. */
  int LETTER = 35;
  /** RegularExpression Id. */
  int DIGIT = 36;
  /** RegularExpression Id. */
  int DIGITS = 37;
  /** RegularExpression Id. */
  int FRACTION_OPT = 38;
  /** RegularExpression Id. */
  int EXPONENT_OPT = 39;
  /** RegularExpression Id. */
  int LETTER_OR_DIGIT = 40;
  /** RegularExpression Id. */
  int UNDERSCORE_END = 41;
  /** RegularExpression Id. */
  int ID = 42;
  /** RegularExpression Id. */
  int NUM = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"main\"",
    "\"void\"",
    "\"newVar\"",
    "\"float\"",
    "\"boolean\"",
    "\"if\"",
    "\"then\"",
    "\"while\"",
    "\"readInput\"",
    "\"printOut\"",
    "\"return\"",
    "\"fun\"",
    "\"true\"",
    "\"false\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "<LETTER>",
    "<DIGIT>",
    "<DIGITS>",
    "<FRACTION_OPT>",
    "<EXPONENT_OPT>",
    "<LETTER_OR_DIGIT>",
    "<UNDERSCORE_END>",
    "<ID>",
    "<NUM>",
  };

}
