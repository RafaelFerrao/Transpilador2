/* Generated By:JavaCC: Do not edit this line. Karloff.java */
import java.io.*;
import ast.*;
import java.util.ArrayList;

public class Karloff implements KarloffConstants {

  public static void main(String args[]) throws ParseException,IOException {

 Karloff parser = new Karloff(new FileInputStream(args[0]));
 Prog arvore = parser.Karloff();
 arvore.print();
 arvore.export();
  }

// KARLOFF -> MAIN FUNC?
  static final public Prog Karloff() throws ParseException {
 Main main; ArrayList<Fun> funs = new ArrayList();
    main = Main();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      funs = Func();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
 {if (true) return new Prog(main, funs);}
    throw new Error("Missing return statement in function");
  }

// MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
  static final public Main Main() throws ParseException {
 ArrayList<VarDecl> vars = null; ArrayList<Comando> coms = new ArrayList();
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAR);
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
    vars = VarDecl();
    coms = SeqCommands();
    jj_consume_token(RBRACE);
 {if (true) return new Main(vars, coms);}
    throw new Error("Missing return statement in function");
  }

//VARDECL -> VARDECL "newVar" TIPO TOKEN_id ";" | vazio
  static final public ArrayList<VarDecl> VarDecl() throws ParseException {
 String type; Token var=null; ArrayList<VarDecl> vars = new ArrayList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWVAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(NEWVAR);
      type = Type();
      var = jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
                                              vars.add(new VarDecl(type, var.image));
    }
   {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

//TIPO -> "float" | "boolean" | "void"
  static final public String Type() throws ParseException {
 Token type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      type = jj_consume_token(FLOAT);
      break;
    case BOOLEAN:
      type = jj_consume_token(BOOLEAN);
      break;
    case VOID:
      type = jj_consume_token(VOID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return type.image;}
    throw new Error("Missing return statement in function");
  }

//SEQCOMANDOS -> (COMANDO)*
  static final public ArrayList<Comando> SeqCommands() throws ParseException {
 ArrayList<Comando> coms = new ArrayList(); Comando c = null;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case PRINT_OUTPUT:
      case RETURN:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      c = Command();
                 coms.add(c);
    }
   {if (true) return coms;}
    throw new Error("Missing return statement in function");
  }

//COMANDO -> TOKEN_id COMANDO'
//| "if" EXP "then" "{" SEQCOMANDOS "}" ";"
//| "while" EXP "{" SEQCOMANDOS "}" ";"
//| "return" EXP ";"
//| "printOut" EXP ";"
  static final public Comando Command() throws ParseException {
 Token id=null; Exp e=null; Comando c=null; ArrayList<Comando> coms = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      c = CommandAux1(id.image);
      {if (true) return c;}
      break;
    case IF:
      jj_consume_token(IF);
      e = Exp();
      jj_consume_token(THEN);
      jj_consume_token(LBRACE);
      coms = SeqCommands();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMICOLON);
      {if (true) return new CIf(e, coms);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      e = Exp();
      jj_consume_token(LBRACE);
      coms = SeqCommands();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMICOLON);
      {if (true) return new CWhile(e, coms);}
      break;
    case RETURN:
      jj_consume_token(RETURN);
      e = Exp();
      jj_consume_token(SEMICOLON);
      {if (true) return new CReturn(e);}
      break;
    case PRINT_OUTPUT:
      jj_consume_token(PRINT_OUTPUT);
      e = Exp();
      jj_consume_token(SEMICOLON);
      {if (true) return new CPrint(e);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//COMANDO' ->  "=" COMANDO''
//| "(" LISTAEXP? ")" ";"
  static final public Comando CommandAux1(String var) throws ParseException {
 Comando c = null; ArrayList<Exp> args = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      c = CommandAux2(var);
      {if (true) return c;}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LPAR:
      case ID:
      case NUM:
        args = ExpList();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOLON);
      {if (true) return new CChamadaFun(var, args);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//COMANDO'' -> EXP ";"
//| "readInput" "(" ")" ";"
  static final public Comando CommandAux2(String var) throws ParseException {
 Exp exp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LPAR:
    case ID:
    case NUM:
      exp = Exp();
      jj_consume_token(SEMICOLON);
      {if (true) return new CAtribuicao(var, exp);}
      break;
    case READ_INPUT:
      jj_consume_token(READ_INPUT);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOLON);
      {if (true) return new CReadInput(var);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
 Exp arg1 = null; Exp arg2 = null; String op = null; Exp e = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      arg1 = Exp();
      op = Op();
      arg2 = Exp();
      jj_consume_token(RPAR);
      {if (true) return new EOpExp(op, arg1, arg2);}
      break;
    case TRUE:
    case FALSE:
    case ID:
    case NUM:
      e = Factor();
      {if (true) return e;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Factor() throws ParseException {
 Token id = null; ArrayList<Exp> args = null; Token value = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LPAR:
        case ID:
        case NUM:
          args = ExpList();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
                                               {if (true) return new EChamadaFun(id.image, args);}
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      {if (true) return new EVar(id.image);}
      break;
    case NUM:
      value = jj_consume_token(NUM);
      {if (true) return new EFloat(Float.parseFloat(value.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
      {if (true) return new ETrue();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
      {if (true) return new EFalse();}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
             {if (true) return "+";}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return "-";}
      break;
    case MULT:
      jj_consume_token(MULT);
             {if (true) return "*";}
      break;
    case DIV:
      jj_consume_token(DIV);
            {if (true) return "/";}
      break;
    case AND:
      jj_consume_token(AND);
            {if (true) return "&&";}
      break;
    case OR:
      jj_consume_token(OR);
           {if (true) return "||";}
      break;
    case LTHAN:
      jj_consume_token(LTHAN);
              {if (true) return "<";}
      break;
    case GTHAN:
      jj_consume_token(GTHAN);
              {if (true) return ">";}
      break;
    case EQUALS:
      jj_consume_token(EQUALS);
               {if (true) return "==";}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Exp> ExpList() throws ParseException {
 ArrayList<Exp> exps = new ArrayList(); Exp e1=null; Exp e2=null;
    e1 = Exp();
            exps.add(e1);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      e2 = Exp();
                                              exps.add(e2);
    }
    {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Fun> Func() throws ParseException {
 Token nome = null; ArrayList<ParamFormalFun> params = new ArrayList(); String retorno = null; ArrayList<VarDecl> vars = new ArrayList(); ArrayList<Comando> body = new ArrayList();
ArrayList<Fun> funs = new ArrayList();
    label_4:
    while (true) {
      jj_consume_token(FUN);
      retorno = Type();
      nome = jj_consume_token(ID);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case FLOAT:
      case BOOLEAN:
        params = ArgsList();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      vars = VarDecl();
      body = SeqCommands();
      jj_consume_token(RBRACE);
                                                                                                                          funs.add(new Fun(nome.image, params, retorno, vars, body));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUN:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
    }
    {if (true) return funs;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<ParamFormalFun> ArgsList() throws ParseException {
 String type = null; Token id = null; ArrayList<ParamFormalFun> params = new ArrayList();
    type = Type();
    id = jj_consume_token(ID);
                        params.add(new ParamFormalFun(type, id.image));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      type = Type();
      id = jj_consume_token(ID);
                                                                                                         params.add(new ParamFormalFun(type, id.image));
    }
    {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public KarloffTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x80,0x340,0xd400,0xd400,0x80060000,0x80080000,0x80062000,0x80060000,0x80060000,0x80000000,0x60000,0x1ff00000,0x0,0x340,0x10000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x400,0x400,0xc00,0x0,0xc00,0xc00,0xc00,0x0,0xc00,0x0,0x4,0x0,0x0,0x4,};
   }

  /** Constructor with InputStream. */
  public Karloff(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Karloff(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Karloff(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Karloff(KarloffTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(KarloffTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
